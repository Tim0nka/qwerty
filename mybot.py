# pip install aiogram aiohttp
#from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
 


import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from secret import secrets
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import logging
from datetime import datetime

#—Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª bot.log, –∫—É–¥–∞ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è.
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    encoding="utf-8"
)


#–§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_action(user: types.User, button: str, api: str, answer: str):
    now = datetime.now()
    log_entry = (
        f"id={user.id}, username={user.username}, button={button}, api={api}, "
        f"date={now.strftime('%Y-%m-%d')}, time={now.strftime('%H:%M:%S')}, answer={answer}"
    )
    logging.info(log_entry)



bot = Bot(token=secrets['BOT_API_TOKEN'])
dp = Dispatcher()

#–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_inline = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ", callback_data="weather")],
        [InlineKeyboardButton(text="üíµ –ö—É—Ä—Å USD ‚Üí BYN", callback_data="currency")],
        [InlineKeyboardButton(text="‚Çø –ö—É—Ä—Å –±–∏—Ç–∫–æ–π–Ω–∞", callback_data="bitcoin")]
    ]
)

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="weather", description="–ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ"),
        types.BotCommand(command="currency", description="–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ BYN"),
        types.BotCommand(command="bitcoin", description="–ö—É—Ä—Å –±–∏—Ç–∫–æ–π–Ω–∞ –∫ USD")
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=menu_inline)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    action = callback.data

    if action == "weather":
        await get_weather(callback.message)
    elif action == "currency":
        await get_currency(callback.message)
    elif action == "bitcoin":
        await get_bitcoin(callback.message)
    else:
        await callback.message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    await callback.answer()  #–ó–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


#–ü–æ–≥–æ–¥–∞
async def get_weather(message: types.Message):
    city = "Minsk"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={secrets['OPENWEATHER_API_KEY']}&units=metric&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if resp.status == 200:
                temp = data['main']['temp']
                desc = data['weather'][0]['description']
                humidity = data['main']['humidity']
                wind = data['wind']['speed']
                answer = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"–í–µ—Ç–µ—Ä: {wind} –º/—Å"
                )
                await message.answer(answer)
                #–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                log_action(message.from_user, "weather", "OpenWeatherMap", answer)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")


#–ö—É—Ä—Å USD ‚Üí BYN
async def get_currency(message: types.Message):
    url = f"https://v6.exchangerate-api.com/v6/{secrets['EXCHANGERATE_API_KEY']}/latest/USD"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if resp.status == 200:
                byn = data['conversion_rates'].get('BYN')
                if byn:
                    answer = f"üíµ 1 USD = {byn:.2f} BYN"
                    await message.answer(answer)
                    #–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    log_action(message.from_user, "currency", "ExchangeRate API", answer)
                else:
                    await message.answer("‚ùå –ö—É—Ä—Å BYN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")


#–ö—É—Ä—Å –ë–∏—Ç–∫–æ–π–Ω–∞
async def get_bitcoin(message: types.Message):
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if resp.status == 200 and "bitcoin" in data:
                rate = data['bitcoin']['usd']
                answer = f"‚Çø 1 BTC = {rate:.2f} USD"
                await message.answer(answer)
                #–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                log_action(message.from_user, "bitcoin", "CoinGecko", answer)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–π–Ω–∞")



#–ó–∞–ø—É—Å–∫
async def main():
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
